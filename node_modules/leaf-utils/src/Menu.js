const Discord = require("discord.js");


module.exports = async (options) => {
  
    if (!options.message) {
        throw new Error('Leaf-utils: message argument was not specified.');
    }
    if (typeof options.message !== 'object') {
        throw new TypeError('Leaf-utils: Invalid Discord Message was provided.');
    }

    if (!options.components) options.components = {};
    if (typeof options.components !== 'object') {
        throw new TypeError('Leaf-utils: components must be an object.');
    }

    if (!options.othersMessage) {
        options.othersMessage = 'Only <@{{author}}> can use this menu';
    }
    if (typeof options.othersMessage !== 'string') {
        throw new TypeError('Leaf-utils: othersMessage must be a string');
    }

    let {
        MessageActionRow,
        MessageSelectMenu
    } = require("discord.js");
    let typ = options.components.type || 1;
    let type = Number(typ);
    if (type > 2)
        throw new Error(
            "Max type is 2"
        );
    let message = options.message
    let pagination = options.menus.pagination;
    let rowz = options.components.buttons;
    let menuOptions = [];

    for (let i = 0; i < pagination.length; i++) {
        if (pagination[i].emoji) {
            let paginationopt = {
                label: pagination[i].label,
                description: pagination[i].desc,
                value: pagination[i].label,
                emoji: pagination[i].emoji
            };

            menuOptions.push(paginationopt);
        } else if (!pagination[i].emoji) {
            let paginationopt = {
                label: pagination[i].label,
                description: pagination[i].desc,
                value: pagination[i].label
            };

            menuOptions.push(paginationopt);
        }
    }
    let delopt;


    let slct = new MessageSelectMenu()
        .setMaxValues(1)
        .setCustomId("help")
        .setPlaceholder(options.placeHolder || "Dropdown Pages")
        .addOptions([menuOptions]);

    let row = new MessageActionRow().addComponents(slct);

    let buttons = [];

    buttons.push(row);

    if (rowz) {
        for (let i = 0; i < rowz.length; i++) {
            buttons.push(rowz[i]);
        }
    }

    if (message.commandId) {
        message.followUp({
            embeds: [options.embed],
            components: buttons
        });
        let m = await message.fetchReply();

        const collector = m.createMessageComponentCollector({
            type: "SELECT_MENU",
            idle: 600000
        });
        collector.on("collect", async (menu) => {
            if (menu.user.id !== options.message.author.id) {
                return menu.reply({
                    content: options.othersMessage.replace(
                        '{{author}}',
                        options.message.member.id,
                    ),
                    ephemeral: true,
                });
            }

            let selet = menu.values[0];

            menu.deferUpdate();

            for (let i = 0; i < pagination.length; i++) {
                if (selet === pagination[i].label) {
                    if (type === 1) {
                        menu.followUp({
                            embeds: [pagination[i].embed],
                            ephemeral: true
                        });
                    } else if (type === 2) {
                        menu.message.edit({
                            embeds: [pagination[i].embed]
                        });
                    }
                }
            }
        });
        collector.on("end", async (collected) => {
            if (collected.size === 0) {
                m.edit({
                    embeds: [options.components.embed],
                    components: []
                });
            }
        });
    } else if (!message.commandId) {
        message
            .reply({
                embeds: [options.components.embed],
                components: buttons
            })
            .then(async (m) => {
                const collector = m.createMessageComponentCollector({
                    type: "SELECT_MENU",
                    idle: 600000
                });
                collector.on("collect", async (menu) => {
                    if (menu.user.id !== options.message.author.id) {
                        return menu.reply({
                            content: options.othersMessage.replace(
                                '{{author}}',
                                options.message.member.id,
                            ),
                            ephemeral: true,
                        });
                    }
                    let selet = menu.values[0];

                    menu.deferUpdate();

                    for (let i = 0; i < pagination.length; i++) {
                        if (selet === pagination[i].label) {
                            if (type === 1) {
                                menu.followUp({
                                    embeds: [pagination[i].embed],
                                    ephemeral: true
                                });
                            } else if (type === 2) {
                                menu.message.edit({
                                    embeds: [pagination[i].embed]
                                });
                            }
                        }
                    }
                });
                collector.on("end", async (collected) => {
                    if (collected.size === 0) {
                        m.edit({
                            embeds: [options.components.embed],
                            components: []
                        });
                    }
                });
            });
    }
}