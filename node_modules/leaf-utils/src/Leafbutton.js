const {
    MessageActionRow,
    MessageButton,
} = require("discord.js");

const validStyles = [
    "SECONDARY",
    "DANGER",
    "SUCCESS",
    "PRIMARY"
]

module.exports = async (options) => {

    let button1 = new MessageActionRow()
        .addComponents(
            new MessageButton()
            .setLabel(options.back.label)
            .setStyle(options.back.style)
            .setCustomId('back'),

            new MessageButton()
            .setLabel(options.home.label)
            .setStyle(options.home.style)
            .setCustomId('home'),

            new MessageButton()
            .setLabel(options.forward.label)
            .setStyle(options.forward.style)
            .setCustomId('forward')
        )

    let currentPage = 0;

    const embeds = options.embeds

    const message = options.message

    if (!options.back.label) {
        options.back.label = '‚è™ Back';
    }
    if (typeof options.back.label !== 'string') {
        throw new Error('Leaf-utils: back button text must be a string.');
    }

    if (!options.home.label) {
        options.home.label = 'üè† Home';
    }
    if (typeof options.home.label !== 'string') {
        throw new Error('Leaf-utils: home button text must be a string.');
    }

    if (!options.forward.label) {
        options.forward.label = 'Next ‚è©';
    }
    if (typeof options.forward.label !== 'string') {
        throw new Error('Leaf-utils: forward button text must be a string.');
    }

    if (!options.back.style) options.back.style = 'DANGER';
    if (typeof options.back.style !== 'string') {
        throw new TypeError('Leaf-utils: back color must be a string.');
    }

    if (!options.home.style) options.home.style = 'DANGER';
    if (typeof options.home.style !== 'string') {
        throw new TypeError('Leaf-utils: home color must be a string.');
    }

    if (!options.forward.style) options.forward.style = 'DANGER';
    if (typeof options.forward.style !== 'string') {
        throw new TypeError('Leaf-utils: forward color must be a string.');
    }

    if (!options.time) options.time = 600000;

    if (typeof options.time !== 'number') {
        throw new TypeError('Leaf-utils Error: time must be a number.');
    }

    if (!options.othersMessage) {
        options.othersMessage = 'Only <@{{author}}> can use buttons';
    }
    if (typeof options.othersMessage !== 'string') {
        throw new TypeError('Leaf-utils: othersMessage must be a string');
    }

    let leafEmbed = await message.channel.send({
        components: [button1],
        embeds: [embeds[currentPage]]
    })


     	const filter = (mes) => {
      if (mes.user.id === message.author.id) return true;
    mes.reply({
        content: options.othersMessage.replace(
					'{{author}}', message.member.id,
				),
        ephemeral: true
    });
    return false;
}
    const collector = leafEmbed.createMessageComponentCollector({
        filter: filter,
        time: options.time
    });

    collector.on('collect', async b => {
        b.deferUpdate()

        if (b.customId === 'back') {
            if (currentPage - 1 < 0) currentPage = embeds.length - 1
            else currentPage -= 1
            leafEmbed.edit({
                components: [button1],
                embeds: [embeds[currentPage]]
            })

        } else if (b.customId === 'home') {
            currentPage = 0;
            leafEmbed.edit({
                components: [button1],
                embeds: [embeds[currentPage]]
            })
            
        } else if (b.customId === 'forward') {
            if (currentPage + 1 == embeds.length) currentPage = 0
            else currentPage += 1
            leafEmbed.edit({
                components: [button1],
                embeds: [embeds[currentPage]]
            })
        }
    })

    if (options.setDisabled == true) {
        setTimeout(() => {
            button1.components[0].setDisabled(true);
            button1.components[1].setDisabled(true);
            button1.components[2].setDisabled(true);
            leafEmbed.edit({
                embed: [embeds[currentPage]],
                components: [button1],
            })
        }, options.time)
    }
}