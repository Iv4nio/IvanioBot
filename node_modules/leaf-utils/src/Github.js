const { MessageEmbed } = require(`discord.js`);
const Discord = require('discord.js');
const fetch = require("node-fetch");
const functions = require('../functions');

module.exports = async (options) => {
    try {	
      if (!options.message) {
		throw new Error('Leaf-utils: message argument was not specified.');
	}
	if (typeof options.message !== 'object') {
		throw new TypeError('Leaf-utils: Invalid Discord Message was provided.');
	}

     if (!options.args) {
		throw new Error('Leaf-utils: args argument was not specified.');
	}

	if (!options.embed) options.embed = {};
	if (typeof options.embed !== 'object') {
		throw new TypeError('Leaf-utils: embed must be an object.');
	}

		if (!options.embed.title) {
		options.embed.title = '{{author}}';
	}
	if (typeof options.embed.title !== 'string') {
		throw new TypeError('Leaf-utils: embed title must be a string.');
	}

  	if (!options.embed.description) {
		options.embed.description =
			'Info about {{author}}';
	}
	if (typeof options.embed.description !== 'string') {
		throw new TypeError('Leaf-utils: embed description must be a string.');
	}

if (!options.query) options.query = 'Give me a github username to search';
	if (typeof options.query !== 'string') {
		throw new TypeError('Leaf-utils: query must be a string.');
	}

  if (!options.noResult) options.noResult = 'I cant find this user';
	if (typeof options.noResult !== 'string') {
		throw new TypeError('Leaf-utils: noResult must be a string.');
	}

  if (!options.embed.color) options.embed.color = functions.randomHexColor();
	if (typeof options.embed.color !== 'string') {
		throw new TypeError('Leaf-utils: embed color must be a string.');
	}

const args = options.args
  const git = args.join(" ")
  if(!git) return options.message.reply({ content: options.query});
    

fetch(`https://api.github.com/users/${args.join('-')}`)
    .then(res => res.json()).then(body => {
      if(body.message) return options.message.reply({ content: options.noResult});
    let { login, avatar_url, name, id, html_url, public_repos, followers, following, location, created_at, bio } = body;

            const embed = new MessageEmbed()
            .setTitle(options.embed.title
                .replace('{{author}}', login))
                .setDescription(options.embed.description
                .replace('{{author}}', login))
            .setColor(options.embed.color)
            .setThumbnail(`${avatar_url}`)
            .addField(`Username`, `${login}`)
            .addField(`ID`, `${id}`)
            .addField(`Bio`, `${bio || "No Bio"}`)
            .addField(`Public Repositories`, `${public_repos || "None"}`, true)
            .addField(`Followers`, `${followers}`, true)
            .addField(`Following`, `${following}`, true)
            .addField(`Links`, `${location || "No Links"}`)
        
          return options.message.reply({ embeds: [embed] });

    })
} catch (err) {
        console.log(`Error Occured | Github | Error: ${err.stack}`)
    }

	}